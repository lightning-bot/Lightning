stages:
  - Static Code Analysis
  - Tests
  - Publish

flake8:
  stage: Static Code Analysis
  image: python:3.8-buster
  script:
  - pip install flake8
  - flake8 .
  rules:
    - changes:
      - lightning/**/*

isort:
  stage: Static Code Analysis
  image: python:3.8-buster
  script:
    - pip install isort
    - isort --check --diff .
  rules:
    - changes:
      - "**/*.py"

variables:
  POSTGRES_DB: lightningbot
  POSTGRES_USER: lightningbot
  POSTGRES_PASSWORD: "test"

Test Migrations:
  stage: Tests
  image: postgres:12
  services:
  - postgres:12
  before_script:
    - apt update && apt upgrade -y && apt install -y python3-dev libffi-dev python3-pip git
    - python3 -m pip install -U wheel
    - python3 -m pip install -U asyncpg migri==0.7.0
  script:
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -v "ON_ERROR_STOP=1" -c "CREATE DATABASE tests;"
    - migri --db-name "tests" --db-user "$POSTGRES_USER" --db-pass "$POSTGRES_PASSWORD" --db-host "postgres" --dialect "postgresql" migrate
  rules:
    - changes:
      - migrations/*

Test Poetry:
  stage: Tests
  image: ubuntu:20.04
  before_script:
    - apt update && apt upgrade -y && apt install -y python3-dev zlib1g libffi-dev python3-pip git
    - python3 -m pip install -U wheel
    - python3 -m pip install poetry
    - poetry --version
    - poetry config virtualenvs.in-project true
  script:
    - poetry install -vv

Publish release to Sentry:
  stage: Publish
  image: getsentry/sentry-cli
  variables:
    GIT_STRATEGY: "clone"
    GIT_DEPTH: 0
  script:
    - sentry-cli releases new $CI_COMMIT_SHA --project $SENTRY_PROJECT
    - sentry-cli releases set-commits --auto "$CI_COMMIT_SHA"
    - sentry-cli releases finalize $CI_COMMIT_SHA
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
